// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  clerkId        String
  email          String    @unique
  name           String?
  password       String?
  role           String    @default("user")
  emailVerified  DateTime?
  image          String?
  profile        Profile?
  Account        Account[]
  Session        Session[]
  friends        String[]  @db.ObjectId
  reciverMessage Message[] @relation(name: "reciver")
  senderMessage  Message[] @relation(name: "sender")

  @@map("users")
}

model Profile {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  bio    String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  @@map("profiles")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  reciverId String   @db.ObjectId
  reciver   User     @relation(fields: [reciverId], references: [id], name: "reciver", onDelete: Cascade)
  senderId  String   @db.ObjectId
  sender    User     @relation(fields: [senderId], references: [id], name: "sender", onDelete: Cascade)

  @@map("messages")
}
